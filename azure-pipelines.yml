
jobs:
  # https://docs.microsoft.com/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema
  # https://docs.microsoft.com/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent
  # https://docs.microsoft.com/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
  # https://docs.microsoft.com/azure/devops/pipelines/tasks/test/publish-code-coverage-results?view=azure-devops
  # https://docs.microsoft.com/azure/devops/pipelines/artifacts/build-artifacts?view=azure-devops&tabs=yaml
  - job: build_ps_WinLatest
    pool:
      vmImage: windows-latest
    steps:
    - powershell: |
        $PSVersionTable
        Install-PackageProvider -Name "NuGet" -Confirm:$false -Force -Verbose
        Install-Module -Name PowerShellGet -Repository PSGallery -Force
        .\actions_bootstrap.ps1
        Invoke-Build -File $(Build.SourcesDirectory)\src\pwshPlaces.build.ps1
      displayName: 'Build and Test - Windows PowerShell'
    - task: PublishTestResults@2
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**\Artifacts\testOutput\PesterTests.xml'
        testRunTitle: 'ps_winLatest'
        failTaskOnFailedTests: true
      displayName: "Publish Unit Test Results - Windows PowerShell"
    - task: PublishCodeCoverageResults@1
      inputs:
        summaryFileLocation: '**\Artifacts\ccReport\CodeCoverage.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)\src\Artifacts\ccReport'
        failIfCoverageEmpty: false
      displayName: "Publish Unit Test Code Coverage - Windows PowerShell"
      condition: and(in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed'), eq(variables['System.PullRequest.IsFork'], false))
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)\src\Archive'
        artifactName: pwshPlaces-Archive

  - job: build_pwsh_WinLatest
    pool:
      vmImage: windows-latest
    steps:
    - pwsh: |
        $PSVersionTable
        .\actions_bootstrap.ps1
        Invoke-Build -File $(Build.SourcesDirectory)\src\pwshPlaces.build.ps1
      displayName: 'Build and Test - Windows pwsh'
    - task: PublishTestResults@2
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**\Artifacts\testOutput\PesterTests.xml'
        testRunTitle: 'pwsh_winLatest'
        failTaskOnFailedTests: true
      displayName: "Publish Unit Test Results - Windows pwsh"
    - task: PublishCodeCoverageResults@1
      inputs:
        summaryFileLocation: '**\Artifacts\ccReport\CodeCoverage.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)\src\Artifacts\ccReport'
        failIfCoverageEmpty: false
      displayName: "Publish Unit Test Code Coverage - Windows pwsh"
      condition: and(in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed'), eq(variables['System.PullRequest.IsFork'], false))
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)\src\Archive'
        artifactName: pwshPlaces-Archive

  - job: build_pwsh_ubuntuLatest
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        sudo dpkg -i powershell_6.2.0-1.ubuntu.16.04_amd64.deb
        sudo apt-get install -f
      displayName: 'Install PowerShell Core'
    - script: |
        pwsh -c '$PSVersionTable;.\actions_bootstrap.ps1;Invoke-Build -File $(Build.SourcesDirectory)/src/pwshPlaces.build.ps1'
      displayName: 'Build and Test - Linux'
    - task: PublishTestResults@2
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/Artifacts/testOutput/PesterTests.xml'
        testRunTitle: 'pwsh_ubuntuLatest'
        failTaskOnFailedTests: true
      displayName: "Publish Unit Test Results - Linux"
    - task: PublishCodeCoverageResults@1
      inputs:
        summaryFileLocation: '**/Artifacts/ccReport/CodeCoverage.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src/Artifacts/ccReport'
        failIfCoverageEmpty: false
      displayName: "Publish Unit Test Code Coverage - Linux"
      condition: and(in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed'), eq(variables['System.PullRequest.IsFork'], false))
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)/src/Archive'
        artifactName: pwshPlaces-Archive

  - job: build_pwsh_macOSLatest
    pool:
      vmImage: macOS-latest
    steps:
    - script: |
        pwsh -c '$PSVersionTable;.\actions_bootstrap.ps1;Invoke-Build -File $(Build.SourcesDirectory)/src/pwshPlaces.build.ps1'
      displayName: 'Build and Test - macOS'
    - task: PublishTestResults@2
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/Artifacts/testOutput/PesterTests.xml'
        testRunTitle: 'pwsh_macOSLatest'
        failTaskOnFailedTests: true
      displayName: "Publish Unit Test Results - macOS"
    - task: PublishCodeCoverageResults@1
      inputs:
        summaryFileLocation: '**/Artifacts/ccReport/CodeCoverage.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src/Artifacts/ccReport'
        failIfCoverageEmpty: false
      displayName: "Publish Unit Test Code Coverage - macOS"
      condition: and(in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed'), eq(variables['System.PullRequest.IsFork'], false))
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)/src/Archive'
        artifactName: pwshPlaces-Archive
